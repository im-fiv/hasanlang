program = { SOI ~ module_declaration_marker? ~ statement* ~ EOI }

/// Used for encapsulating statements into a single pair for some cases
statements = { statement* }

//* Modules *//
module_use_items_stmt = { "use" ~ "module" ~ module_path? ~ identifier ~ module_use_items ~ "end" ~ stmt_sep? }
module_use_all_stmt = { "use" ~ "module" ~ module_path? ~ identifier ~ "." ~ "*" ~ stmt_sep? }
module_use_stmt = { "use" ~ "module" ~ module_path? ~ identifier ~ stmt_sep? }

/// If present, will mark the file as a module
module_declaration_marker = { "module" ~ module_path? ~ identifier ~ stmt_sep? }
	module_path = { ( identifier ~ "." ~ !&"*")+ }

module_use_items = { (module_use_item ~ ("," ~ module_use_item)*)? }
	module_use_item = _{ module_item_rename | module_item_regular }
		module_item_rename = { identifier ~ "as" ~ identifier }
		module_item_regular = { identifier }

//* Statements *//
statement = _{
	module_use_items_stmt |
	module_use_all_stmt |
	module_use_stmt |
	interface_stmt |
	interface_impl_stmt |
	return_stmt |
	if_stmt |
	while_stmt |
	break_stmt |
	for_in_stmt |
	function_call_stmt |
	function_definition_stmt |
	function_declaration_stmt |
	type_alias_stmt |
	class_definition |
	variable_definition_stmt |
	variable_assign_stmt |
	enum_definition_stmt
}

keywords = {
	"type" | "var" | "return" | "func" |
	"end" | "do" | "class" | "impl" |
	"constructor" | "pub" | "get" |
	"set" | "static" | "as" | "enum" |
	"and" | "or" | "not" | "if" | "else" |
	"elseif" | "while" | "break" | "true" |
	"false" | "then" | "for" | "in" |
	"use" | "module" | "interface" | "const"
}

stmt_sep = _{ ";" }

general_modifiers = { modifier_public? ~ modifier_constant? ~ modifier_static? }
	modifier_public = { "pub" }
	modifier_static = { "static" }
	modifier_constant = { "const" }

//* Statements *//
// Module system is defined earlier //

interface_stmt = { general_modifiers ~ "interface" ~ identifier ~ definition_generics? ~ interface_members ~ "end" ~ stmt_sep? }
interface_impl_stmt = { "impl" ~ identifier ~ call_generics? ~ "for" ~ identifier ~ call_generics? ~ class_definition_member* ~ "end" ~ stmt_sep? } // reusing class definition member

return_stmt = { "return" ~ expression? ~ stmt_sep }

// This is wrong, but it will be handled inside the parser
function_call_stmt = { term_without_recursion ~ recursive_operator+ ~ stmt_sep }

function_definition_stmt = { function_header ~ do_block ~ stmt_sep? }
function_declaration_stmt = { function_header ~ stmt_sep }

type_alias_stmt = { general_modifiers ~ "type" ~ identifier ~ definition_generics? ~ "=" ~ type ~ stmt_sep }

// Class definition is defined later //

variable_definition_stmt = { general_modifiers ~ "var" ~ identifier ~ (":" ~ type)? ~ "=" ~ expression ~ stmt_sep }
variable_assign_stmt = { (recursive_expression | expression) ~ "=" ~ expression ~ stmt_sep }

enum_definition_stmt = { general_modifiers ~ "enum" ~ identifier ~ (enum_variant ~ ("," ~ enum_variant)*)? ~ "end" }

//* Interfaces *//
interface_members = { interface_member* }
	interface_member = _{
		interface_variable |
		interface_function |
		interface_type
	}

interface_variable = { general_modifiers ~ "var" ~ identifier ~ ":" ~ type ~ stmt_sep }
interface_function = { attributes? ~ general_modifiers ~ "func" ~ identifier ~ definition_generics? ~ "(" ~ interface_function_arguments? ~ ")" ~ "->" ~ type ~ stmt_sep }
	interface_function_arguments = { type ~ ("," ~ type)* }
interface_type = { general_modifiers ~ "type" ~ identifier ~ stmt_sep }

//* Control flow *//
if_stmt = { "if" ~ expression ~ "then" ~ statements ~ if_elseif* ~ if_else? ~ "end" }
	if_elseif = { ("else if" | "elseif") ~ expression ~ "then" ~ statements }
	if_else = { "else" ~ statements }

while_stmt = { "while" ~ expression ~ do_block ~ stmt_sep? }
break_stmt = { "break" ~ stmt_sep }

for_in_stmt = { "for" ~ expression ~ "in" ~ expression ~ do_block ~ stmt_sep? }

//* Functions *//
function_header = { general_modifiers ~ "func" ~ identifier ~ definition_generics? ~ "(" ~ function_arguments? ~ ")" ~ ("->" ~ type)? }

function_arguments = { function_argument ~ ("," ~ function_argument)* }
	function_argument = { identifier ~ ":" ~ type }
function_call_arguments = { expression ~ ("," ~ expression)* ~ ","? }

do_block = { "do" ~ statement* ~ "end" }

//* Class definition *//
class_definition = { general_modifiers ~ "class" ~ identifier ~ definition_generics? ~ class_definition_member* ~ "end" ~ stmt_sep? }
class_definition_member = {
	class_definition_function |
	class_definition_variable |
	class_definition_type
}

class_definition_function = { attributes? ~ function_definition_stmt ~ stmt_sep? }
class_definition_variable = { general_modifiers ~ "var" ~ identifier ~ ":" ~ type ~ ("=" ~ expression)? ~ stmt_sep }
// Note: All associated types must be defined immediately
class_definition_type = { general_modifiers ~ "type" ~ identifier ~ "=" ~ type ~ stmt_sep }

// Other class features //
attributes = { "#[" ~ attribute_identifier ~ ("," ~ attribute_identifier)* ~ "]" }
attribute_identifier = { "constructor" | "get" | "set" }

//* Enums *//
enum_variant = { identifier }

//* Types *//
type = { tuple_type | array_type | regular_type | function_type }
type_path = { identifier ~ ("::" ~ identifier)* }

regular_type = { type_path ~ call_generics? }
// Note: `array_type` is a part of `regular_type` and is parsed into a regular type with the `array` field set to true
array_type = { regular_type ~ "[" ~ "]" }
tuple_type = { "[" ~ ((type ~ ",")* ~ type)? ~ "]" }

function_type = { definition_generics? ~ "(" ~ function_type_arguments ~ ")" ~ "->" ~ type }
	function_type_arguments = { (type ~ ("," ~ type)*)? }

definition_generics = { "<" ~ definition_generics_type ~ ("," ~ definition_generics_type)* ~ ">" }
	definition_generics_type = { identifier ~ ":" ~ "impl" ~ "<" ~ definition_generics_interfaces ~ ">" | identifier }
		definition_generics_interfaces = { (regular_type ~ ("," ~ regular_type)*)? }

call_generics = { "<" ~ type ~ ("," ~ type)* ~ ">" }

//* Expressions *//
expression = { anonymous_function | unary_expression | binary_expression | array_expression | recursive_expression | term }
binary_operator = { "+" | "-" | "/" | "*" | "%" | "==" | "!=" | "and" | "or" | ">=" | "<=" | ">" | "<" }
unary_operator = { "-" | "not" }

// General expression features //
anonymous_function = { "func" ~ definition_generics? ~ "(" ~ function_arguments? ~ ")" ~ ("->" ~ type)? ~ do_block }
unary_expression = { unary_operator ~ term }
binary_expression = { term ~ (binary_operator ~ term)+ }
array_expression = { ("[" ~ "]") | ("[" ~ expression ~ ("," ~ expression)* ~ "]") }

// Terms //
term = _{ anonymous_function | unary_expression | array_expression | recursive_expression | term_without_recursion }
term_without_recursion = _{ literal | identifier | "(" ~ expression ~ ")" }

// Recursive expressions //
recursive_operator = _{ recursive_call | recursive_array | recursive_dot | recursive_double_colon | recursive_as }
	recursive_call = { call_generics? ~ "(" ~ function_call_arguments? ~ ")" }
	recursive_array = { "[" ~ expression ~ "]" }
	recursive_dot = { "." ~ identifier }
	recursive_double_colon = { "::" ~ identifier }
	recursive_as = { "as" ~ type }

recursive_expression = { term_without_recursion ~ recursive_operator+ }

//* Literals and identifiers *//
literal = _{ boolean_literal | string_literal | number_literal }

string_literal = { "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
number_literal = @{ ("-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ ("." ~ ASCII_DIGIT+)?) | "0" }
boolean_literal = { "true" | "false" }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* ~ !keywords }

//* To be ignored *//
line_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

COMMENT = _{ line_comment | block_comment }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }